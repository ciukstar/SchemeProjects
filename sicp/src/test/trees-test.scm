(load "lib/test-manager/load.scm")
(load "src/main/trees.scm")

(define-test (exersise-2-25)
  (let ((t (list 1 3 (list 5 7) 9))
        (e (cons 1 (cons 3 (cons (cons 5 (cons 7 ())) (cons 9 ())))))
        (t2 (list (list 7)))
        (e2 (cons (cons 7 ()) ()))
        (t3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
        (e3 (cons 1 (cons (cons 2 (cons (cons 3 (cons (cons 4 (cons (cons 5 (cons (cons 6 (cons 7 ())) ())) ())) ())) ())) ()))))
    (assert-true (equal? t e))
    (assert-equal (car (cdr (car (cdr (cdr t))))) 7)
    (assert-true (equal? t2 e2))
    (assert-equal (car (car t2)) 7)
    (assert-true (equal? t3 e3))
    (assert-equal (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr t3)))))))))))) 7)))

(define-test (exersise-2-24)
  (let ((t (list 1 (list 2 (list 3 4))))
        (e1 (cons 1 (cons (list 2 (list 3 4)) ())))
        (e2 (cons 1 (cons (cons 2 (cons (list 3 4) ())) ())))
        (e3 (cons 1 (cons (cons 2 (cons (cons 3 (cons 4 ())) ())) ()))))
    (assert-equal (count-leaves t) 4)
    (assert-true (and (equal? t e1) (equal? t e2) (equal? t e3)))
    (assert-equal (car t) 1)
    (assert-equal (length t) 2)
    (assert-true (null? (cdr (cdr t))))
    (assert-equal (car (car (cdr t))) 2)
    (assert-equal (car (car (cdr (car (cdr t))))) 3)
    (assert-equal (car (cdr (car (cdr (car (cdr t)))))) 4)))

(define-test (lengt-test)
  (let ((x (cons (list 1 2) (list 3 4))))
    (assert-equal (count-leaves x) 4)
    (assert-equal (count-leaves (list x x)) 8)))
