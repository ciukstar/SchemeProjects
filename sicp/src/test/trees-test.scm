(load "lib/test-manager/load.scm")
(load "src/main/trees.scm")

(define-test (subsets-test)
  (define s (list 1 2 3))
  (define 2s (subsets s))
  (assert-true (equal? 2s (list () (list 3) (list 2) (list 2 3) (list 1) (list 1 3) (list 1 2) (list 1 2 3)))))

(define-test (square-tree2-test)
  (define x (list 1 (list 2 (list 3 4) 5) (list 6 7)))
  (define r (square-tree2 x))
  (assert-true (equal? r (list 1 (list 4 (list 9 16) 25) (list 36 49)))))

(define-test (square-tree-test)
  (define x (list 1 (list 2 (list 3 4) 5) (list 6 7)))
  (define r (square-tree x))
  (assert-true (equal? r (list 1 (list 4 (list 9 16) 25) (list 36 49)))))

(define (scale-tree-test)
  (define x (list (list 1 2) (list 3 4)))
  (define r (scale-tree x 2))
  (assert-true (equal? r (list (list 2 4) (list 6 8)))))

(define-test (fringe-test)
  (define x (list (list 1 2) (list 3 4)))
  (define r1 (fringe x))
  (define r2 (fringe (list x x)))
  (assert-true (equal? r1 (list 1 2 3 4)))
  (assert-true (equal? r2 (list 1 2 3 4 1 2 3 4))))

(define-test (deep-reverse-test)
  (define x (list 1 (list 2 3) 4 5 (list 6 7) 8 9))
  (define r (deep-reverse x))
  (assert-true (equal? r (list 9 8 (list 7 6) 5 4 (list 3 2) 1))))

(define-test (exercise-2-27)
  (define x (list (list 1 2) (list 3 4)))
  (assert-true (equal? (reverse x) (list (list 3 4) (list 1 2)))))

(define-test (reverse-test)
  (define x (list 1 2 3 4))
  (assert-true (equal? (reverse x) (list 4 3 2 1))))

(define-test (exercize-2-26)
  (define x (list 1 2 3))
  (define y (list 4 5 6))
  (assert-true (equal? (append x y) (list 1 2 3 4 5 6)))
  (assert-true (equal? (cons x  y) (list (list 1 2 3) 4 5 6)))
  (assert-equal (car (car (cdr (list x y)))) 4))

(define-test (exersise-2-25)
  (let ((t (list 1 3 (list 5 7) 9))
        (e (cons 1 (cons 3 (cons (cons 5 (cons 7 ())) (cons 9 ())))))
        (t2 (list (list 7)))
        (e2 (cons (cons 7 ()) ()))
        (t3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
        (e3 (cons 1 (cons (cons 2 (cons (cons 3 (cons (cons 4 (cons (cons 5 (cons (cons 6 (cons 7 ())) ())) ())) ())) ())) ()))))
    (assert-true (equal? t e))
    (assert-equal (car (cdr (car (cdr (cdr t))))) 7)
    (assert-true (equal? t2 e2))
    (assert-equal (car (car t2)) 7)
    (assert-true (equal? t3 e3))
    (assert-equal (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr t3)))))))))))) 7)))

(define-test (exersise-2-24)
  (let ((t (list 1 (list 2 (list 3 4))))
        (e1 (cons 1 (cons (list 2 (list 3 4)) ())))
        (e2 (cons 1 (cons (cons 2 (cons (list 3 4) ())) ())))
        (e3 (cons 1 (cons (cons 2 (cons (cons 3 (cons 4 ())) ())) ()))))
    (assert-equal (count-leaves t) 4)
    (assert-true (and (equal? t e1) (equal? t e2) (equal? t e3)))
    (assert-equal (car t) 1)
    (assert-equal (length t) 2)
    (assert-true (null? (cdr (cdr t))))
    (assert-equal (car (car (cdr t))) 2)
    (assert-equal (car (car (cdr (car (cdr t))))) 3)
    (assert-equal (car (cdr (car (cdr (car (cdr t)))))) 4)))

(define-test (lengt-test)
  (let ((x (cons (list 1 2) (list 3 4))))
    (assert-equal (count-leaves x) 4)
    (assert-equal (count-leaves (list x x)) 8)))
