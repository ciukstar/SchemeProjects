(load "lib/test-manager/load.scm")
(load "src/main/interfaces.scm")

(define-test (flatmap-test)
  (define i (lambda (x) x))
  (define x (list (list 1 2 3)))
  (define r (flatmap i x))
  (define x2 (list (list (list 1 2 3))))
  (define r2 (flatmap i (flatmap i x2)))
  (assert-true (equal? r (list 1 2 3)))
  (assert-true (equal? r2 (list 1 2 3))))

;; (flatmap i (list 1 2 3))
;; (accumulate appennd () (map i (list (list 1 2 3))))
;; (append (list 1 2 3) (accumulate append () ()))
;; (append (list 1 2 3) ())
;; (list 1 2 3)

(define-test (reverse-left-test)
  (define s (list 1 2 3 4))
  (define r (reverse-left s))
  (assert-true (equal? r (list 4 3 2 1))))

;; (reverse-left (list 1 2))
;; (fold-left (lambda (x y) (cons y x)) () (list 1 2))
;; (iter () (list 1 2))
;; (iter (cons 1 ()) (list 2))
;; (iter (cons 2 (cons 1 ())) ())
;; (cons 2 (cons 1 ()))

(define-test (reverse-right-test)
  (define s (list 1 2 3 4))
  (define r (reverse-right s))
  (assert-true (equal? r (list 4 3 2 1))))

(define-test (fold-right-test-2)
  (define s (list 1 2 3))
  (define r (fold-right list () s))
  (assert-true (equal? r (list 1 (list 2 (list 3 ()))))))

;; (fold-right list () (list 1 2 3))
;; (accumulate list () (list 1 2 3))
;; (list 1 (accumulate list () (list 2 3)))
;; (list 1 (list 2 (accumulate list () (list 3))))
;; (list 1 (list 2 (list 3 (accumulate list () ()))))
;; (list 1 (list 2 (list 3 ())))

(define-test (fold-left-test-2)
  (define s (list 1 2 3))
  (define r (fold-left list () s))
  (assert-true (equal? r (list (list (list () 1) 2) 3))))

;; (fold-left list () (list 1 2 3))
;; (iter () (list 1 2 3))
;; (iter (list () 1) (list 2 3))
;; (iter (list (list () 1) 2) (list 3))
;; (iter (list (list (list () 1) 2) 3) ())
;; (list (list (list () 1) 2) 3)

(define-test (fold-right-test)
  (define s (list 1 2 3))
  (define r (fold-right / 1 s))
  (assert-equal r (/ 3 2)))

;; (fold-right / 1 (list 1 2 3))
;; (accumulate / 1 (list 1 2 3))
;; (/ 1 (accumulate / 1 (list 2 3)))
;; (/ 1 (/ 2 (accumulate / 1 (list 3))))
;; (/ 1 (/ 2 (/ 3 (accumulate / 1 ()))))
;; (/ 1 (/ 2 (/ 3 1)))
;; (/ 1 (/ 2 3))
;; (/ 3 2)

(define-test (fold-left-test)
  (define s (list 1 2 3))
  (define r (fold-left / 1 s))
  (assert-equal r (/ 1 6)))

;; (fold-left / 1 (list 1 2 3))
;; (iter 1 (list 1 2 3))
;; (iter 1 (list 2 3))
;; (iter (/ (/ 1 1) 2) (list 3))
;; (iter (/ (/ (/ 1 1) 2) 3) ())
;; (iter (/ (/ 1 2) 3) ())
;; (/ 1 6)
